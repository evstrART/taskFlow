// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–¥–∞—á–∏ –∏–∑ URL
function getIdsFromUrl() {
    const pathSegments = window.location.pathname.split('/'); // –†–∞–∑–±–∏–≤–∞–µ–º URL –Ω–∞ —á–∞—Å—Ç–∏
    const projectId = pathSegments[2]; // ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 3-–π –ø–æ–∑–∏—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å 2)
    const taskId = pathSegments[4]; // ID –∑–∞–¥–∞—á–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 5-–π –ø–æ–∑–∏—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å 4)
    return { projectId, taskId };
}
const {projectId, taskId} = getIdsFromUrl()

const today = new Date().toISOString().split('T')[0];
document.getElementById('taskDueDate').setAttribute('min', today);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Breadcrumb
function updateBreadcrumb(projectId, projectTitle, taskTitle) {
    const breadcrumb = document.querySelector('.breadcrumb ul');
    breadcrumb.innerHTML = `
        <li><a href="/">Home</a></li>
        <li><a href="/projects">Projects</a></li>
        <li><a href="/projects/${projectId}">${projectTitle}</a></li>
        <li><span aria-current="page">${taskTitle}</span></li>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Breadcrumb
async function fetchProjectAndTask() {
    const { projectId, taskId } = getIdsFromUrl();
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    try {
        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        const projectResponse = await fetch(`/api/projects/${projectId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!projectResponse.ok) {
            throw new Error('Error fetching project details');
        }

        const project = await projectResponse.json();

        const taskResponse = await fetch(`/api/projects/${projectId}/tasks/${taskId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        if (!taskResponse.ok) {
            throw new Error('Error fetching task details');
        }
        const task = await taskResponse.json();

        updateBreadcrumb(projectId, project.name, task.title);
        updateTaskTitle(taskId, task.title );
        displayTaskDescription(task.description);
        displayStatus(task.status);
        fetchUser(task.assigned_to);


    } catch (error) {
        console.error('Error:', error);
        alert(error.message);
    }
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function() {
    fetchProjectAndTask(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º Breadcrumb
};

function redirectToProfile() {
    const token = localStorage.getItem('token');
    if (token) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
        window.location.href = '/profile';  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location.href = '/auth/sign-in';
    }
}
function updateTaskTitle(taskId, taskTitle) {
    const titleElement = document.getElementById('task-title');
    titleElement.textContent = `#${taskId} ${taskTitle}`; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
}
function displayTaskDescription(taskDescription) {
    const taskDescriptionElement = document.querySelector('.task-description p'); // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç <p> –≤–Ω—É—Ç—Ä–∏ .task-description
    if (taskDescriptionElement) {
        taskDescriptionElement.textContent = taskDescription; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    } else {
        console.error('Element with class "task-description" not found.');
    }
}

function loadComments() {
    const { projectId, taskId } = getIdsFromUrl(); // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
    const url = `/api/projects/${projectId}/tasks/${taskId}/comments`;
    const token = localStorage.getItem('token'); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

    if (!token) {
        console.error("No token found. Cannot load comments.");
        return;
    }

    console.log("Loading comments from:", url); // –õ–æ–≥–∏—Ä—É–µ–º URL

    fetch(url, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}` // –í–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error fetching comments: ${response.status} ${response.statusText}`);
            }
            return response.json(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
        })
        .then(data => {
            const commentList = document.getElementById('comment-list');
            commentList.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

            if (data.length === 0) {
                commentList.innerHTML = '<p>–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</p>'; // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                return;
            }

            data.forEach(comment => {
                const commentDiv = document.createElement('div');
                commentDiv.className = 'comment';
                commentDiv.dataset.commentId = comment.comment_id;

                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Comment
                commentDiv.innerHTML = `
                <div class="comment-avatar">üôÇ</div>
                <div class="comment-content">
                    <p>${comment.content}</p>
                    <div class="comment-meta">
                        <div class="comment-username">${comment.username}</div>
                        <div class="comment-time">${new Date(comment.created_at).toLocaleString()}</div>   
                    </div>
                </div>
                <div class="comment-actions">
                    <button class="edit-comment" title="Edit">‚úèÔ∏è</button>
                    <button class="delete-comment" title="Delete">üóëÔ∏è</button>
                </div>
            `;

                commentList.appendChild(commentDiv);
            });
            document.querySelectorAll('.edit-comment').forEach(button => {
                button.addEventListener('click', handleEditComment);
            });

            document.querySelectorAll('.delete-comment').forEach(button => {
                button.addEventListener('click', handleDeleteComment);
            });
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        });
}
function handleEditComment(event) {
    const commentDiv = event.target.closest('.comment');
    const commentId = commentDiv.dataset.commentId;
    const newContent = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:");

    if (newContent) {
        const url = `/api/projects/${projectId}/tasks/${taskId}/comments/${commentId}`;
        const token = localStorage.getItem('token');

        fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ comment: newContent }) // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + response.statusText);
                }
                return response.json();
            })
            .then(() => {
                loadComments(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞:', error);
            });
    }
}

function handleDeleteComment(event) {
    const commentDiv = event.target.closest('.comment');
    const commentId = commentDiv.dataset.commentId;
    const url = `/api/projects/${projectId}/tasks/${taskId}/comments/${commentId}`;
    const token = localStorage.getItem('token');

    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")) {
        fetch(url, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + response.statusText);
                }
                loadComments(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞:', error);
            });
    }
}
// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadComments);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
document.getElementById('submit-comment').addEventListener('click', function() {
    const commentText = document.getElementById('comment-text').value; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if (commentText) {
        const url = `/api/projects/${projectId}/tasks/${taskId}/comments`; // URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const token = localStorage.getItem('token'); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

        if (!token) {
            console.error("No token found. Cannot send comment.");
            return;
        }

        const commentInput = { comment: commentText }; // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json', // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                'Authorization': `Bearer ${token}` // –í–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω
            },
            body: JSON.stringify(commentInput) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ JSON
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + response.statusText);
                }
                return response.json(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
            })
            .then(data => {
                console.log("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —Å ID:", data.id); // –õ–æ–≥–∏—Ä—É–µ–º ID –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                loadComments(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                document.getElementById('comment-text').value = ''; // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞:', error);
            });
    } else {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."); // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
    }
});


// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadComments);

async function fetchUser(user_id){
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }
    try {
        const response = await fetch(`http://localhost:8080/api/users/${user_id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('Error fetching users');
        }

        const user = await response.json();
        displayUser(user);
    } catch (error) {
        console.error('Error fetching users:', error);
        alert(error.message);
    }

}
function displayUser(user){
    const assignedUserElement = document.getElementById('assigned-user'); // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID
    if (assignedUserElement) {
        assignedUserElement.textContent = user.username; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
    } else {
        console.error('–≠–ª–µ–º–µ–Ω—Ç —Å ID "assigned-user" –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}

function displayStatus(taskStatus) {
    const statusElement = document.getElementById("task-status");
    if (statusElement) {
        statusElement.textContent = taskStatus; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
    } else {
        console.error('–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

function openTagModal() {
    document.getElementById('tag-modal').style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ç–µ–≥–æ–≤
function closeTagModal() {
    document.getElementById('tag-modal').style.display = 'none';
}
document.querySelector('.add-tag').addEventListener('click', openTagModal);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ç–µ–≥–æ–≤
    document.getElementById('close-tag-modal').addEventListener('click', closeTagModal);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.addEventListener('click', function(event) {
    const modal = document.getElementById('tag-modal');
    if (event.target === modal) {
        modal.style.display = 'none'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    }
});
document.getElementById('save-tag').addEventListener('click', function() {
    const tagInput = document.getElementById('tag-input');
    const tagColor = document.querySelector('.color.selected'); // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    if (tagInput.value && tagColor) {
        const tagData = {
            name: tagInput.value,
            color: tagColor.getAttribute('data-color'),
        };

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ projectId –∏ taskId
        fetch(`/api/projects/${projectId}/tasks/${taskId}/tags`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}` // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            },
            body: JSON.stringify(tagData),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞: ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä

                const tag = document.createElement('div');
                tag.style.backgroundColor = tagData.color; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                tag.textContent = tagData.name;
                tag.className = 'tag'; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π
                tag.setAttribute('data-tag-id', data.tag_id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–≥–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ

                document.querySelector('.task-header').appendChild(tag); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏

                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                const deleteIcon = document.createElement('span');
                deleteIcon.textContent = '‚úñ'; // –°–∏–º–≤–æ–ª –∫—Ä–µ—Å—Ç–∏–∫–∞
                deleteIcon.className = 'delete-icon'; // –ö–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
                deleteIcon.addEventListener('click', function(event) {
                    event.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ
                    deleteTag(data.tag_id, tag); // –£–¥–∞–ª—è–µ–º —Ç–µ–≥
                });

                tag.appendChild(deleteIcon); // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ—Å—Ç–∏–∫ –≤ —Ç–µ–≥
                document.querySelector('.tag-container').appendChild(tag); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                tagInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                tagColor.classList.remove('selected'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
                document.getElementById('tag-modal').style.display = 'none';// –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                loadTags();
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞:', error);
            });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
document.querySelectorAll('.color').forEach(color => {
    color.addEventListener('click', function() {
        document.querySelectorAll('.color').forEach(c => c.classList.remove('selected')); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        color.classList.add('selected'); // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function loadTags() {
    fetch(`/api/projects/${projectId}/tasks/${taskId}/tags`, {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}` // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–≥–æ–≤: ' + response.statusText);
            }
            return response.json();
        })
        .then(tags => {
            const tagContainer = document.querySelector('.tag-container');
            tagContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–≥–æ–≤

            tags.forEach(tag => {
                const tagElement = document.createElement('div');
                tagElement.style.backgroundColor = tag.color; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Ç–µ–≥–∞
                tagElement.textContent = tag.name;
                tagElement.className = 'tag'; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π

                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                const deleteIcon = document.createElement('span');
                deleteIcon.textContent = '‚úñ'; // –°–∏–º–≤–æ–ª –∫—Ä–µ—Å—Ç–∏–∫–∞
                deleteIcon.className = 'delete-icon'; // –ö–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
                deleteIcon.addEventListener('click', function(event) {
                    event.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ
                    deleteTag(tag.tag_id, tagElement); // –£–¥–∞–ª—è–µ–º —Ç–µ–≥
                });

                tagElement.appendChild(deleteIcon); // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ—Å—Ç–∏–∫ –≤ —Ç–µ–≥
                tagContainer.appendChild(tagElement); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            });
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞:', error);
        });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞
function deleteTag(tag_id, tagElement) {
    console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ —Å ID: ${tag_id}`);
    fetch(`/api/projects/${projectId}/tasks/${taskId}/tags/${tag_id}`, {
        method: 'DELETE',
        headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}` // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        }
    })
        .then(response => {
            console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞: ' + response.statusText);
            }
            tagElement.remove(); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞:', error);
        });
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadTags);

function openEditTaskModal() {
    document.getElementById('editTaskModal').style.display = 'block';
}

function closeEditTaskModal() {
    document.getElementById('editTaskModal').style.display = 'none';
}

async function editTask() {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const taskUrl = `http://localhost:8080/api/projects/${projectId}/tasks/${taskId}`; // –ó–∞–º–µ–Ω–∏—Ç–µ projectId –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞

    try {
        const response = await fetch(taskUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Error fetching task: ${errorData.message}`);
        }

        const taskData = await response.json();
        document.getElementById('taskTitle').value = taskData.title || '';
        document.getElementById('taskDescription').value = taskData.description || '';
        document.getElementById('taskStatus').value = taskData.status || '';
        document.getElementById('taskPriority').value = taskData.priority || '';
        document.getElementById('taskDueDate').value = taskData.dueDate || '';

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ "Assigned To"
        await loadAssignedToOptions(taskData.assignedTo); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π

        openEditTaskModal(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    } catch (error) {
        console.error(`Failed to fetch task: ${error.message}`);
        alert(`Failed to fetch task: ${error.message}`);
    }
}
async function loadAssignedToOptions(selectedId) {
    const token = localStorage.getItem('token');
    const usersUrl = 'http://localhost:8080/api/users'; // URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    try {
        const response = await fetch(usersUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('Failed to fetch users');
        }

        const users = await response.json();
        const assignedToSelect = document.getElementById('assignedTo');
        assignedToSelect.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø—Ü–∏–π

        users.forEach(user => {
            const option = document.createElement('option');
            option.value = user.id; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–µ `id`
            option.textContent = user.username; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–µ `username`
            if (user.id === selectedId) {
                option.selected = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            }
            assignedToSelect.appendChild(option);
        });
    } catch (error) {
        console.error(`Failed to load users: ${error.message}`);
        alert(`Failed to load users: ${error.message}`);
    }
}

async function updateTask() {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    const input = {
        title: document.getElementById('taskTitle').value || null,
        description: document.getElementById('taskDescription').value || null,
        assigned_to: parseInt(document.getElementById('assignedTo').value) || null,
        status: document.getElementById('taskStatus').value || null,
        priority: document.getElementById('taskPriority').value || null,
        due_date: document.getElementById('taskDueDate').value || null
    };

    const taskUrl = `http://localhost:8080/api/projects/${projectId}/tasks/${taskId}`; // –ó–∞–º–µ–Ω–∏—Ç–µ projectId –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞

    try {
        const response = await fetch(taskUrl, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(input)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Error updating task: ${errorData.message}`);
        }

        alert(`Task ${taskId} updated successfully.`);
        closeEditTaskModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        window.location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    } catch (error) {
        console.error(`Failed to update task: ${error.message}`);
        alert(`Failed to update task: ${error.message}`);
    }
}

async function deleteTask() {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    const taskUrl = `http://localhost:8080/api/projects/${projectId}/tasks/${taskId}`; // –ó–∞–º–µ–Ω–∏—Ç–µ projectId –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞

    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?")) {
        try {
            const response = await fetch(taskUrl, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Error deleting task: ${errorData.message}`);
            }

            alert(`Task ${taskId} deleted successfully.`);
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            window.location.href = `http://localhost:8080/projects/${projectId}/`;
        } catch (error) {
            console.error(`Failed to delete task: ${error.message}`);
            alert(`Failed to delete task: ${error.message}`);
        }
    }
}