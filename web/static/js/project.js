function getProjectIdFromUrl() {
    const pathSegments = window.location.pathname.split('/'); // –†–∞–∑–±–∏–≤–∞–µ–º URL –Ω–∞ —á–∞—Å—Ç–∏
    const projectId = pathSegments[2]; // ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 3-–π –ø–æ–∑–∏—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å 2)
    return projectId; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ projectId
}

const projectId = getProjectIdFromUrl();

// Display current year in the footer
document.getElementById('year').textContent = new Date().getFullYear();

const today = new Date().toISOString().split('T')[0];
document.getElementById('projectStartDate').setAttribute('min', today);

document.getElementById('taskDueDate').setAttribute('min', today);
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
document.getElementById('projectStartDate').addEventListener('change', function() {
    const startDate = this.value;
    document.getElementById('projectEndDate').setAttribute('min', startDate);
});
let tasks = []; // –•—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
let sortOrder = {
    title: 1, // 1 –¥–ª—è –ø—Ä—è–º–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, -1 –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π
    status: 1,
    due_date: 1
};

function sortTasks(criteria) {
    tasks.sort((a, b) => {
        if (criteria === 'due_date') {
            return (new Date(a.due_date) - new Date(b.due_date)) * sortOrder[criteria];
        }
        return a[criteria].localeCompare(b[criteria]) * sortOrder[criteria];
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sortOrder[criteria] *= -1;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
    displayTasks(tasks);
}


// Fetch project details
async function fetchProjectDetails(projectId) {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    try {
        // Fetch project details
        const projectResponse = await fetch(`/api/projects/${projectId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!projectResponse.ok) {
            throw new Error('Error fetching project details');
        }

        const project = await projectResponse.json();
        displayProjectDetails(project);

        // Fetch tasks for the project
        const tasksResponse = await fetch(`/api/projects/${projectId}/tasks`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!tasksResponse.ok) {
            throw new Error('Error fetching tasks');
        }

        tasks = await tasksResponse.json(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        displayTasks(tasks);

        // Fetch project members
        await fetchProjectMembers(projectId); // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    } catch (error) {
        console.error('Error:', error);
        alert(error.message);
    }
}
async function fetchAllUsers(){
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }
    try {
        const response = await fetch(`http://localhost:8080/api/users`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('Error fetching users');
        }

        const users = await response.json();
        displayUsers(users);
    } catch (error) {
        console.error('Error fetching users:', error);
        alert(error.message);
    }

}
function displayUsers(users){
    const addMembersSelect = document.getElementById('memberId');
    addMembersSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</option>'

    users.forEach(user => {
        const option = document.createElement('option');
        option.value = user.user_id; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ id —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        option.textContent = user.username; // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        addMembersSelect.appendChild(option);
    });
}

// Fetch project members
async function fetchProjectMembers(projectId) {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    try {
        const response = await fetch(`http://localhost:8080/api/projects/${projectId}/members`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('Error fetching project members');
        }

        const members = await response.json();
        displayMembers(members);
    } catch (error) {
        console.error('Error fetching project members:', error);
        alert(error.message);
    }
}

// Display members in the team section
function displayMembers(members) {
    const teamList = document.getElementById('team-list');
    const assignedToSelect = document.getElementById('taskAssignedTo');

    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    teamList.innerHTML = '';
    assignedToSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</option>'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

    if (members.length === 0) {
        teamList.innerHTML = '<li>No members found</li>';
        return;
    }

    members.forEach(member => {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        const listItem = document.createElement('li');

        // –ò–º—è –∏ —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        listItem.textContent = `${member.username} - ${member.role}`;

        // –°–æ–∑–¥–∞–µ–º –∑–Ω–∞—á–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã
        const deleteIcon = document.createElement('span');
        deleteIcon.textContent = 'üóëÔ∏è'; // –°–∏–º–≤–æ–ª –∫–æ—Ä–∑–∏–Ω—ã
        deleteIcon.style.fontSize = '11px';
        deleteIcon.className = 'delete-icon'; // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–µ–π


        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        deleteIcon.addEventListener('click', async () => {
            const confirmed = confirm(`–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${member.username}?`);
            if (confirmed) {
                await deleteMember(member.user_id); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
                fetchProjectMembers(currentProjectId); // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        listItem.addEventListener('mouseenter', () => {
            deleteIcon.style.display = 'inline'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–æ–∫
        });
        listItem.addEventListener('mouseleave', () => {
            deleteIcon.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∑–Ω–∞—á–æ–∫
        });

        listItem.appendChild(deleteIcon); // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –≤ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        teamList.appendChild(listItem); // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        const option = document.createElement('option');
        option.value = member.user_id; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ id —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        option.textContent = member.username; // –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        assignedToSelect.appendChild(option);
    });
}

async function deleteMember(memberId) {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    try {
        const response = await fetch(`http://localhost:8080/api/projects/${projectId}/members/${memberId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('Error deleting member');
        }

        alert('Member deleted successfully'); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        location.reload()
    } catch (error) {
        console.error('Error deleting member:', error);
        alert(error.message);
    }
}

function formatDate(isoDate) {
    if (!isoDate) return 'Not available'; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã
    const date = new Date(isoDate);
    const options = { day: '2-digit', month: '2-digit', year: 'numeric' }; // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'numeric' –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≥–æ–¥–∞
    return date.toLocaleDateString('ru-RU', options).replace(/\./g, '.'); // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

// Display project details
function displayProjectDetails(project) {
    const projectTitle = document.getElementById('project-title');
    const projectDescription = document.getElementById('project-description');
    const projectNameInBreadcrumb = document.getElementById('project-name');
    const projectStartDate = document.getElementById('project-start-date');
    const projectEndDate = document.getElementById('project-end-date');
    const projectStatus = document.getElementById('project-status');

    projectTitle.textContent = project.name;
    projectDescription.textContent = project.description || 'No description available';
    projectNameInBreadcrumb.textContent = project.name;

    projectStartDate.textContent = formatDate(project.start_date);
    projectEndDate.textContent = formatDate(project.end_date);
    projectStatus.textContent = project.status || 'Not available';
}

// Display tasks list in table
function displayTasks(tasks) {
    const tasksList = document.getElementById('tasks-list').getElementsByTagName('tbody')[0];
    tasksList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

    if (!Array.isArray(tasks) || tasks.length === 0) {
        tasksList.innerHTML = '<tr><td colspan="3">–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
        return;
    }

    tasks.forEach(task => {
        const taskRow = document.createElement('tr');

        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        const taskTitleCell = document.createElement('td');
        const taskLink = document.createElement('a');
        taskLink.textContent = task.title;
        taskLink.href = `/projects/${task.project_id}/tasks/${task.task_id}`;
        taskLink.style.textDecoration = 'none'; // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        taskLink.style.color = 'inherit'; // –ù–∞—Å–ª–µ–¥—É–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
        taskTitleCell.appendChild(taskLink);

        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        const taskStatusCell = document.createElement('td');
        taskStatusCell.textContent = task.status || '–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω';

        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        const taskDueDateCell = document.createElement('td');
        taskDueDateCell.textContent = formatDate(task.due_date); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é formatDate

        // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏
        taskRow.appendChild(taskTitleCell);
        taskRow.appendChild(taskStatusCell);
        taskRow.appendChild(taskDueDateCell);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–¥–∞—á
        tasksList.appendChild(taskRow);
    });
}

// Display list of projects in the sidebar
async function fetchProjects() {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    try {
        const response = await fetch('/api/projects/user', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('Error fetching projects');
        }

        const projects = await response.json();
        displayProjects(projects);
    } catch (error) {
        console.error('Error:', error);
        alert(error.message);
    }
}

// Display projects in sidebar
function displayProjects(projects) {
    const projectsList = document.getElementById('projects-list');
    projectsList.innerHTML = '';

    if (projects.length === 0) {
        projectsList.innerHTML = '<li>No projects found</li>';
        return;
    }

    projects.forEach(project => {
        const projectItem = document.createElement('li');
        projectItem.classList.add('project-item');
        projectItem.textContent = project.name;
        projectItem.addEventListener('click', () => {
            window.location.href = `/projects/${project.project_id}`;
        });
        projectsList.appendChild(projectItem);
    });
}

// Extract project ID from URL and fetch data
window.onload = function() {
    const projectId = window.location.pathname.split('/').pop();  // Get project ID from URL
    if (projectId) {
        fetchProjectDetails(projectId);  // Load project and tasks
        fetchProjects(); // Load the list of projects in the sidebar
    } else {
        alert('Project ID is missing in the URL.');
    }
};

function openModal(modalId) {
    document.getElementById(modalId).style.display = 'flex';
}

function closeModal() {
    const modals = document.getElementsByClassName('modal');
    for (let modal of modals) {
        modal.style.display = 'none';
    }
}
function openAddMemberModal(){
    fetchAllUsers();
    openModal('addMemberModal');
}

function openAddTaskModal() {
    openModal('addTaskModal');
}
function openEditProjectModal() {
    openModal('editProjectModal');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
async function editProject() {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }
    const urlParts = window.location.href.split('/');
    const idString = urlParts[urlParts.length - 1];
    const id = parseInt(idString, 10);

    if (isNaN(id)) {
        alert('Invalid project ID');
        return;
    }

    const name = document.getElementById('projectName').value;
    const description = document.getElementById('projectDescription').value;
    const startDate = document.getElementById('projectStartDate').value;
    const endDate = document.getElementById('projectEndDate').value;
    const status = document.getElementById('projectStatus').value;

    const input = {
        name: name ? name : null,
        description: description ? description : null,
        start_date: startDate ? startDate : null,
        end_date: endDate ? endDate : null,
        status: status ? status : null,
    };

    const url = `http://localhost:8080/api/projects/${id}`;

    try {
        const response = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(input)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Error: ${errorData.message} (Status: ${response.status})`);
        }

        const successData = await response.json();
        console.log(`Project ${id} updated successfully:`, successData);
        alert(`Project ${id} updated successfully.`);
        closeModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        window.location.href = `/projects/${id}`; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞
    } catch (error) {
        console.error(`Failed to update project: ${error.message}`);
        alert(`Failed to update project: ${error.message}`);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
document.querySelector('.edit-button').onclick = openEditProjectModal;
document.querySelector('#add-button').onclick = openAddTaskModal;
document.querySelector('.add-members-button').onclick= openAddMemberModal;

// Delete Project Function
async function deleteProject(projectId) {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }
    // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL
    const urlParts = window.location.href.split('/');
    const idString = urlParts[urlParts.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ URL
    const id = parseInt(idString, 10); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
    if (isNaN(id)) {
        alert('Invalid project ID');
        return;
    }

    const url = `http://localhost:8080/api/projects/${id}`;

    try {
        const response = await fetch(url, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            const errorData = await response.json();
            throw new Error(`Error: ${errorData.message} (Status: ${response.status})`);
        }

        // –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        const successData = await response.json();
        console.log(`Project ${id} deleted successfully:`, successData);
        alert(`Project ${id} deleted successfully.`);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        window.location.href = '/projects'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º –∞–¥—Ä–µ—Å
    } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        console.error(`Failed to delete project: ${error.message}`);
        alert(`Failed to delete project: ${error.message}`);
    }
}

function redirectToProfile() {
    const token = localStorage.getItem('token');
    if (token) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
        window.location.href = '/profile';  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location.href = '/auth/sign-in';
    }
}
function addMembers() {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    const urlParts = window.location.href.split('/');
    const idString = urlParts[urlParts.length - 1];
    const projectId = parseInt(idString, 10); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

    const memberId = parseInt(document.getElementById('memberId').value, 10);
    const role = document.getElementById('role').value;

    console.log("Selected Member ID:", memberId);
    console.log("Selected Role:", role);

    const memberData = {
        project_id: projectId,
        user_id: memberId,
        role: role
    };

    fetch(`http://localhost:8080/api/projects/${projectId}/members`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json', // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(memberData) // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ memberData
    })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            alert("Member added successfully!");
            closeModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
            alert("Failed to add member. Please try again.");
        });
}

function addTask() {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL
    const urlParts = window.location.href.split('/');
    const idString = urlParts[urlParts.length - 1];
    const projectId = parseInt(idString, 10); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    const taskTitle = document.getElementById('taskTitle').value;
    const taskDescription = document.getElementById('taskDescription').value;

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    const taskAssignedTo = parseInt(document.getElementById('taskAssignedTo').value, 10);

    const taskStatus = document.getElementById('taskStatus').value;
    const taskPriority = document.getElementById('taskPriority').value;
    const taskDueDate = new Date(document.getElementById('taskDueDate').value).toISOString()

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–¥–∞—á–∏
    const taskData = {
        title: taskTitle,
        description: taskDescription,
        assigned_to: taskAssignedTo, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        status: taskStatus,
        priority: taskPriority,
        due_date: taskDueDate
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
    fetch(`http://localhost:8080/api/projects/${projectId}/tasks`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json', // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(taskData) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É JSON
    })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => {
                    throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${err.message || 'Unknown error'}`);
                });
            }
            return response.json();
        })
        .then(data => {
            console.log('Task added successfully:', data);
            closeModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        })
        .catch(error => {
            console.error('Error adding task:', error);
        });
}

async function completeProject() {
    const token = localStorage.getItem('token');

    if (!token) {
        alert("No token found. Please log in.");
        return;
    }

    const url = `http://localhost:8080/api/projects/${projectId}/complete`; // URL –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Error completing project: ${errorData.message}`);
        }

        alert("Project completed successfully!"); // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        window.location.href = "http://localhost:8080/projects";
    } catch (error) {
        console.error(`Failed to complete project: ${error.message}`);
        alert(`Failed to complete project: ${error.message}`);
    }
}

